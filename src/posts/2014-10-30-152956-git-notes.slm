.meta-data title git雜筆記本
.meta-data description git雜筆記本
.meta-data datetime 2014-10-30 15:29:56
.meta-data tags git,tips
.meta-data category tools
.meta-data link git-notes
.meta-data file 2014-10-30-152956-git-notes
.meta-data template post
.meta-data end

h1 如何下載多個repo到同一個目錄？
ul
  li
    | 建立一個新的remote：
pre
  code.nohighlight
    | git remote add [remote_name] /path/to/other/repo/.git
ul
  li
    | 更新remote到最新狀態：
pre
  code.nohighlight
    | git fetch [remote_name]
ul
  li
    | 建立新的branch：
pre
  code.nohighlight
    | git branch [branch_name] [remote_name]/[remote_branch_name]
h1 如何救回被刪除的檔案？
h2
  | 如果檔案被rm：
ul
  li
    | 如果你知道檔名，用git checkout-index即可：
pre
  code.nohighlight
    | git checkout -- [被rm的檔案]
p
  | 或是
pre
  code.nohighlight
    | git checkout-index [被rm的檔案]
ul
  li
    | 如果你忘了刪了什麼檔，或是有許多檔案被刪除了，可以用git ls-file -d將被刪的檔案列出來：
pre
  code.nohighlight
    | git ls-files -d | xargs git checkout --
h2
  | 如果檔案被git rm：
ul
  li
    | 先用reset回復index的內容：
pre
  code.nohighlight
    | git reset HEAD
ul
  li
    | 再用前面的指令回復檔案：
pre
  code.nohighlight
    | git ls-files -d | xargs git checkout-index
h2
  | 如果檔案被git rm並git commit：
ul
  li
    | 如果你知道是在哪一次的commit刪除了檔案，你可以用git checkout從那次commit的前一次commit中回復被刪除的檔案：
pre
  code.nohighlight
    | git checkout [刪除檔案的那次commit]^ -- [被刪除的檔案]
ul
  li
    | 如果你忘了是在哪一次的commit刪除了檔案，先用git rev-list找出刪除檔案時是在哪一次的commit：
pre
  code.nohighlight
    | git rev-list -n 1 HEAD -- [被刪除的檔案]
p
  | 接著再前面的指令回復檔案：
pre
  code.nohighlight
    | git checkout [刪除檔案的那次commit]^ -- [被刪除的檔案]
ul
  li
    | 上面兩個指令可以合在一起寫：
pre
  code.nohighlight
    | git checkout $(git rev-list -n 1 HEAD -- [被刪除的檔案])^ -- [被刪除的檔案]
h1 利用git建立patch
pre
  code.nohighlight
    | git format-patch -s -n --stdout --text HEAD^..HEAD > file_name.patch

h1 如何刪除branch
p
  | 刪除本地端的branch，注意不能刪除所在的branch，要先checkout到其它的branch再進行刪除。
  code
    | -D
  | 是表示強制刪除，不檢查branch是否已經有合併至其它的branch。
pre
  code.nohighlight
    | git branch -d [要刪除的branch名稱]
      git branch -D [要刪除的branch名稱]
p
  | 刪除完本地端的branch，還想要刪除遠端對應的branch，那可以用push
pre
  code.nohighlight
    | git push origin :[遠端的branch名稱]
    
h1 將已經commit到repo的檔案從repo中移出，但不刪除檔案
pre
  code.nohighlight
    | git rm --cached [被刪除的檔案]

h1 清除在本地端的對應遠端已被刪除的branch
pre
  code.nohighlight
    | git fetch origin --prune

h1 查看某個檔案的修改記錄
pre
  code.nohighlight
    | git log -p [檔案]
    
