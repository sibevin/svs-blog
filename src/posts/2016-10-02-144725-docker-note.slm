.meta-data title docker 筆記
.meta-data datetime 2016-10-02 14:47:25
.meta-data tags docker
.meta-data category tools
.meta-data link docker-note
.meta-data file 2016-10-02-144725-docker-note
.meta-data template post
.meta-data end

h1 一般的 vm 與 docker 差在哪？

p
  | 一般的 vm 會在 hypervisor上再架一個完整的 Guest OS，接著才會安裝對應的 library 與 application。而 docker 會是基於 Docker Engine上跑多個 container，每一個 container 都是一支獨立的 user process，共用 Host OS 的 Kernel。

.rwd-table
  table
    tbody
      tr
        td
          | 一般的 vm
        td
          | docker
      tr
        td.table-block
          table
            tbody
              tr
                td Applications 01
                td Applications 02
                td Applications 03
              tr
                td libraries 01
                td libraries 02
                td libraries 03
              tr.text-red
                td Guest OS 01
                td Guest OS 02
                td Guest OS 03
              tr.text-blue
                td colspan="3"
                  | Hyervisor (例如：VirtualBox)
              tr
                td colspan="3"
                  | Host OS
        td.table-block
          table
            tbody
              tr
                td
                  span.text-green
                    | Container 01
                  table
                    tbody
                      tr
                        td
                          | Application 01
                      tr
                        td
                          | Libraries 01
                td
                  span.text-green
                    | Container 02
                  table
                    tbody
                      tr
                        td
                          | Application 02
                      tr
                        td
                          | Libraries 02
                td
                  span.text-green
                    | Container 03
                  table
                    tbody
                      tr
                        td
                          | Application 03
                      tr
                        td
                          | Libraries 03
              tr.text-blue
                td colspan="3"
                  | Docker Engine
              tr
                td colspan="3"
                  | Host OS
h2 Refs
ul
  li
    a href="https://www.docker.com/what-docker" target="_blank"
      | WHAT IS DOCKER?
  li
    a href="http://stackoverflow.com/questions/16047306/how-is-docker-different-from-a-normal-virtual-machine" target="_blank"
      | SO - How is Docker different from a normal virtual machine?

h1 基本名詞

h2 Docker Client
p
  | 一個工具用來讓使用者可以對 Docker Daemon 送指令與設定。

h2 Docker Daemon
p
  | 一個跑在 Host Machine 的程式，用來操作 Docker。

.image-center
  img src="/images/post/20161002180552965-docker-image-container.png" alt="Dockerfile, Image and Container"
  .image-text
    | Dockerfile, Image and Container

h2 Dockerfile
p
  | 一個檔案用來定義一個 Docker Image 要怎麼產生的，也就是 Docker Image 的原始檔。裡面包含了多個指令來描述 Docker Image 要怎麼被建立。在整個 Docker 的運作中只會被讀取用來建立 Docker Image，而不會被 Docker 更改。

h2 Docker Image
p
  | 一個檔案用來定義怎麼建立 Docker Container，它是 Dockerfile 生成的產物，包含了跑一個應用程式所需的執行環境與函式庫。可以使用
  code
    | build
  | 這個指令來從 Dockerfile 建立 Docker Image。Docker Image一旦被建立之後，它不會被更改，但可以使用這個 image 去建立另一個新的 image。

h2 Docker Container
p
  | Docker Container 是一個 Docker Image 的可執行實體(runnable instance)，當它被建立的時候，除了包含了對應的 Docker Image 外，Docker 還會建立一個對應的 read-write file system 與並做一些初始化與網路設定。當它被執行時，Docker Container 會有一隻對應的正在執行中的 process。可以使用
  code
    | create
  | 指令從 Docker Image 來建立一個 Docker Container。使用
  code
    | start
  | 執行 Docker Container。一個正在執行中的 Docker Container 也有
  code
    | stop, restart
  | 等指令可以使用。

h2 Docker Register
p
  | 用來存放 Docker Image 的地方，當需要使用 Docker Image 時，可以直接從 Docker Register 下載而不用重新 build image。

h2 Refs
ul
  li
    a href="https://docs.docker.com/engine/understanding-docker/" target="_blank"
      | Docker Overview
  li
    a href="http://stackoverflow.com/questions/23735149/docker-image-vs-container" target="_blank"
      | SO - Docker image vs container

h1 指令

h2 docker ps
p
  | 列出正在執行(running)的container。
ul
  li -a 列出所有的containger。

h2 docker run [image]
p
  | 取得image、建立container並執行。
ul
  li -t 分配一個虛擬終端（pseudo-tty）並綁定到container的標準輸入。
  li -i 使用interaction模式，讓container的標準輸入保持開啟狀態，使用者可以由此輸入指令。
  li 如果需要一個console連到container，則 -i 與 -t 必須要一起用，可以縮寫成 -it 。
  li --rm 當離開container時，清除所有的資料與file system，要注意的是會連volumn都會一起刪。

h3 docker search [keyword]
p
  | 查詢Docker Hub上的image。

h3 docker images
p
  | 列出所有的image。

h3 docker stop [container]
p
  | 停止目前正在運作的container。

h3 docker rm [container]
p
  | 移除container。

h3 docker inspect [container]
p
  | 取得目前container的資訊。

h1 使用範例

h2 範例：一個建立phoenix環境的Dockerfile
pre
  code.dockerfile
    | FROM elixir:1.4.2-slim

      RUN apt-get update && apt-get upgrade -y && \
          apt-get install -y curl sudo && \
          curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - && sudo apt-get install -y nodejs

      RUN mix local.hex --force && \
          mix archive.install --force https://github.com/phoenixframework/archives/raw/master/phoenix_new.ez

      CMD ["/bin/bash"]

h2 範例：起一個mysql的docker，並且讓host的mysql client可以連到它。
ul
  li 建立一個 docker-compose.yml 如下：
pre
  code.yaml
    | version: "3"
      services:
        db:
          image: mysql:5.7
          environment:
            MYSQL_ROOT_PASSWORD: "yit0v5911gcfckbd1guk2ctumrdcy8nb"
          ports:
            - "7364:3306"
ul
  li
    | 執行
    code
      | docker-compose up
  li
    | 連線
    code
      | mysql -h 127.0.0.1 -P 7364 -u root -p


h2 範例：起一個 debian server 與 mysql server 的docker，並且讓 debian server 可以連到 mysql server。
ul
  li 建立一個 docker-compose.yml 如下：
pre
  code.yaml
    | version: "3"
      services:
        db:
          image: mysql:5.7
          environment:
            MYSQL_ROOT_PASSWORD: "lvkn9ey1bcty55ghmyedncr79ycdcvgo"
        server:
          image: debian:jessie
          stdin_open: true
          tty: true
ul
  li
    | 執行
    code
      | docker-compose up
  li
    | 執行
    code
      | docker attach [debian_server_container_name]
    | 進入 server 的 container。其中debian_server_container_name即是對應debian container的name。當你執行docker-compose up的時候，log就會顯示container的名稱。
  li
    | 安裝 mysql-client
    code
      | root@210978bba57f:/# apt-get update && apt-get upgrade && apt-get install mysql-client
  li
    | 連線至mysql
    code
      | root@210978bba57f:/# mysql -hdb -P3306 -uroot -p
    | 。其中我們把host設成db，這是因為docker compose的功能，它將同一個compose下的service都放在同一個private network中，而在compose.yml裡設定的service名稱就可以用來代表server對應的ip位址。

h2 Refs
ul
  li
    a href="https://docs.docker.com/compose/networking/" target="_blank"
      | Docker Doc - Networking in Compose

h1 Note
ul
  li
    | docker run -it -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME/.Xauthority:/root/.Xauthority --net=home

h1 Resources

h2 Links
ul
  li
    a href="https://www.gitbook.com/book/philipzheng/docker_practice/details" target="_blank"
      | 《Docker —— 從入門到實踐­》正體中文版
  li
    a href="http://www.slideshare.net/trunk-studio/docker-65378344" target="_blank"
      | 創科 從零開始認識 Docker
  li
    a href="http://bingohuang.com/simplify-docker-image-1/" target="_blank"
      | 7 步精简 Docker 镜像（上）
  li
    a href="http://bingohuang.com/simplify-docker-image-2/" target="_blank"
      | 7 步精简 Docker 镜像（下）
  li
    a href="http://blog.runnable.com/post/145895165446/9-common-dockerfile-mistakes" target="_blank"
      | 9 Common Dockerfile Mistakes
  li
    a href="http://container-solutions.com/understanding-volumes-docker/" target="_blank"
      | Understanding Volumes in Docker
  li
    a href="http://dockone.io/" target="_blank"
      | DockOne.io，最专业的Docker交流平台
  li
    a href="https://thehftguy.com/2016/11/01/docker-in-production-an-history-of-failure/" target="_blank"
      | Docker in Production: A History of Failure

h2 Books
ul
  li
    a href="https://www.openshift.com/promotions/docker-security.html" target="_blank"
      | Docker Security: Using Containers Safely in Production - Adrian Mouat
